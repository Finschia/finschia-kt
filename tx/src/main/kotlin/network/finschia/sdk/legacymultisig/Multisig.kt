package network.finschia.sdk.legacymultisig

/**
 * Implement with reference to
 * https://github.com/cosmos/cosmjs/blob/41884540d2927538fb45adcb36badd79bdfd3e55/packages/amino/src/multisig.ts
 */

/**
 * Compare arrays lexicographically.
 *
 * Returns value < 0 if `a < b`.
 * Returns value > 0 if `a > b`.
 * Returns 0 if `a === b`.
 */
fun compareArrays(a: ByteArray, b: ByteArray): Int {
    val aHex = toHex(a)
    val bHex = toHex(b)
    return when {
        aHex == bHex -> 0
        aHex < bHex -> -1
        else -> 1
    }
}

/**
 * create multi-sig public key
 * @param txSigLimit
 * You need to input `txSigLimit`. `txSigLimit` means the upper limit of multi-sig public key number.
 * `txSigLimit` is different for each chain. Please check your chain `txSigLimit` with reference to
 * https://github.com/Finschia/finschia-sdk/blob/main/x/auth/spec/07_client.md#params-1.
 *
 * `pubKeylist` size should not exceed the upper limit. If it exceeds the upper limit, you will not
 * be able to remit payment from the address generated by its `pubKeylist`. This means that the assets
 * cannot be retrieved from the address.
 *
 * For more information:
 * https://hub.cosmos.network/main/governance/params-change/Auth.html#txsiglimit
 * https://docs.cosmos.network/v0.45/modules/auth/03_antehandlers.html
 * https://docs.cosmos.network/v0.45/modules/auth/07_params.html
 */
fun createMultisigThresholdPubkey(pubkeys: List<AminoPubKey<SinglePubkeyValue>>, threshold: Int, nosort: Boolean = false, txSigLimit: Int): AminoPubKey<MultisigThresholdPubkeyValue> {
    if (pubkeys.size > txSigLimit) {
        error("Tx signature limit m = $txSigLimit exceeds number of public keys n = ${pubkeys.size}")
    }
    if (threshold > pubkeys.size) {
        error("Threshold m = $threshold exceeds number of keys n = ${pubkeys.size}")
    }
    val outPubkeys = if (nosort) pubkeys else pubkeys.sortedWith { a, b ->
        compareArrays(pubkeyToRawAddress(a), pubkeyToRawAddress(b))
    }
    return AminoPubKey(
        type = "tendermint/PubKeyMultisigThreshold",
        value = MultisigThresholdPubkeyValue(
            threshold = threshold.toString(),
            pubkeys = outPubkeys,
        )
    )
}
